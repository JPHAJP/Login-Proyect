import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import './components.css';

const ROLES = [
  { value: 'voluntarios', label: 'Voluntarios' },
  { value: 'personal', label: 'Personal' },
  { value: 'servicio_social', label: 'Servicio Social' },
  { value: 'visitas', label: 'Visitas' },
  { value: 'familiares', label: 'Familiares' },
  { value: 'donantes', label: 'Donantes' },
  { value: 'proveedores', label: 'Proveedores' }
];

export const Register = ({ onSwitchToLogin }) => {
  const { register, loading } = useAuth();
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    nombre_completo: '',
    apellidos: '',
    direccion: '',
    edad: '',
    telefono: '',
    role: '',
    foto_identificacion: null
  });
  const [errors, setErrors] = useState({});
  const [success, setSuccess] = useState('');
  const [previewImage, setPreviewImage] = useState(null);

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    
    // Limpiar errores cuando el usuario empiece a escribir
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }

    if (name === 'foto_identificacion') {
      const file = files[0];
      if (file) {
        // Validar tipo de archivo
        if (!file.type.match(/^image\/(jpeg|jpg|png)$/)) {
          setErrors(prev => ({ 
            ...prev, 
            foto_identificacion: 'Solo se permiten im√°genes PNG, JPG o JPEG' 
          }));
          return;
        }
        
        // Validar tama√±o (5MB max)
        if (file.size > 5 * 1024 * 1024) {
          setErrors(prev => ({ 
            ...prev, 
            foto_identificacion: 'La imagen debe ser menor a 5MB' 
          }));
          return;
        }

        // Crear preview
        const reader = new FileReader();
        reader.onload = (e) => {
          setPreviewImage(e.target.result);
        };
        reader.readAsDataURL(file);

        setFormData(prev => ({ ...prev, [name]: file }));
      }
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    // Validaciones
    if (!formData.email) {
      newErrors.email = 'El email es requerido';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'El formato del email no es v√°lido';
    }

    if (!formData.password) {
      newErrors.password = 'La contrase√±a es requerida';
    } else if (formData.password.length < 6) {
      newErrors.password = 'La contrase√±a debe tener al menos 6 caracteres';
    }

    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Las contrase√±as no coinciden';
    }

    if (!formData.nombre_completo) {
      newErrors.nombre_completo = 'El nombre es requerido';
    }

    if (!formData.apellidos) {
      newErrors.apellidos = 'Los apellidos son requeridos';
    }

    if (!formData.direccion) {
      newErrors.direccion = 'La direcci√≥n es requerida';
    }

    if (!formData.edad) {
      newErrors.edad = 'La edad es requerida';
    } else if (parseInt(formData.edad) < 18) {
      newErrors.edad = 'Debe ser mayor de edad (18 a√±os o m√°s)';
    }

    if (!formData.telefono) {
      newErrors.telefono = 'El tel√©fono es requerido';
    } else if (!/^\+?[0-9]{10,15}$/.test(formData.telefono.replace(/\s/g, ''))) {
      newErrors.telefono = 'El formato del tel√©fono no es v√°lido';
    }

    if (!formData.role) {
      newErrors.role = 'Debe seleccionar un rol';
    }

    if (!formData.foto_identificacion) {
      newErrors.foto_identificacion = 'La fotograf√≠a de identificaci√≥n es requerida';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    // Preparar datos para env√≠o
    const submitData = { ...formData };
    delete submitData.confirmPassword; // No enviar confirmPassword
    submitData.edad = parseInt(formData.edad); // Convertir edad a n√∫mero

    const result = await register(submitData);

    if (result.success) {
      setSuccess('Registro exitoso. Tu cuenta est√° pendiente de autorizaci√≥n por un administrador.');
      setFormData({
        email: '',
        password: '',
        confirmPassword: '',
        nombre_completo: '',
        apellidos: '',
        direccion: '',
        edad: '',
        telefono: '',
        role: '',
        foto_identificacion: null
      });
      setPreviewImage(null);
      
      // Cambiar al login despu√©s de 3 segundos
      setTimeout(() => {
        onSwitchToLogin();
      }, 3000);
    } else {
      setErrors({ general: result.error });
    }
  };

  if (success) {
    return (
      <div className="register-container">
        <div className="card">
          <div className="card-body text-center">
            <div className="alert alert-success">
              <h3>¬°Registro Exitoso!</h3>
              <p>{success}</p>
              <p>Ser√°s redirigido al login en unos segundos...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-4xl mx-auto p-4">
      <div className="bg-white rounded-3xl shadow-casa-medium border border-gray-100 overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-casa-cyan to-casa-purple px-8 py-8 text-white">
          <div className="text-center">
            <h2 className="text-3xl font-bold mb-2">Registro de Usuario</h2>
            <p className="text-casa-cyan-50 text-sm opacity-90">
              Completa todos los campos para crear tu cuenta en Casa del Sol
            </p>
          </div>
        </div>

        {/* Form */}
        <div className="px-8 py-8">
          <form onSubmit={handleSubmit} className="space-y-6">
            {errors.general && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-xl">
                <div className="flex items-center">
                  <span className="text-red-500 mr-2">‚ö†Ô∏è</span>
                  {errors.general}
                </div>
              </div>
            )}

            {/* Email y Contrase√±as */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="md:col-span-2">
                <label htmlFor="email" className="block text-sm font-semibold text-gray-700 mb-2">
                  üìß Correo Electr√≥nico *
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  className={`w-full px-4 py-3 border-2 rounded-xl transition-all duration-200 focus:outline-none ${
                    errors.email 
                      ? 'border-red-300 focus:border-red-500 bg-red-50' 
                      : 'border-gray-200 focus:border-casa-cyan focus:shadow-lg'
                  } disabled:bg-gray-100 disabled:cursor-not-allowed`}
                  value={formData.email}
                  onChange={handleChange}
                  placeholder="tu@email.com"
                  disabled={loading}
                />
                {errors.email && (
                  <p className="text-red-600 text-sm mt-1 flex items-center">
                    <span className="mr-1">‚ùå</span> {errors.email}
                  </p>
                )}
              </div>

              <div>
                <label htmlFor="password" className="block text-sm font-semibold text-gray-700 mb-2">
                  üîí Contrase√±a *
                </label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  className={`w-full px-4 py-3 border-2 rounded-xl transition-all duration-200 focus:outline-none ${
                    errors.password 
                      ? 'border-red-300 focus:border-red-500 bg-red-50' 
                      : 'border-gray-200 focus:border-casa-cyan focus:shadow-lg'
                  } disabled:bg-gray-100 disabled:cursor-not-allowed`}
                  value={formData.password}
                  onChange={handleChange}
                  placeholder="M√≠nimo 6 caracteres"
                  disabled={loading}
                />
                {errors.password && (
                  <p className="text-red-600 text-sm mt-1 flex items-center">
                    <span className="mr-1">‚ùå</span> {errors.password}
                  </p>
                )}
              </div>

              <div>
                <label htmlFor="confirmPassword" className="block text-sm font-semibold text-gray-700 mb-2">
                  üîê Confirmar Contrase√±a *
                </label>
                <input
                  type="password"
                  id="confirmPassword"
                  name="confirmPassword"
                  className={`w-full px-4 py-3 border-2 rounded-xl transition-all duration-200 focus:outline-none ${
                    errors.confirmPassword 
                      ? 'border-red-300 focus:border-red-500 bg-red-50' 
                      : 'border-gray-200 focus:border-casa-cyan focus:shadow-lg'
                  } disabled:bg-gray-100 disabled:cursor-not-allowed`}
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  placeholder="Repite tu contrase√±a"
                  disabled={loading}
                />
                {errors.confirmPassword && (
                  <p className="text-red-600 text-sm mt-1 flex items-center">
                    <span className="mr-1">‚ùå</span> {errors.confirmPassword}
                  </p>
                )}
              </div>
            </div>

            {/* Informaci√≥n Personal */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="nombre_completo" className="block text-sm font-semibold text-gray-700 mb-2">
                  üë§ Nombre(s) *
                </label>
                <input
                  type="text"
                  id="nombre_completo"
                  name="nombre_completo"
                  className={`w-full px-4 py-3 border-2 rounded-xl transition-all duration-200 focus:outline-none ${
                    errors.nombre_completo 
                      ? 'border-red-300 focus:border-red-500 bg-red-50' 
                      : 'border-gray-200 focus:border-casa-cyan focus:shadow-lg'
                  } disabled:bg-gray-100 disabled:cursor-not-allowed`}
                  value={formData.nombre_completo}
                  onChange={handleChange}
                  placeholder="Juan Carlos"
                  disabled={loading}
                />
                {errors.nombre_completo && (
                  <p className="text-red-600 text-sm mt-1 flex items-center">
                    <span className="mr-1">‚ùå</span> {errors.nombre_completo}
                  </p>
                )}
              </div>

              <div>
                <label htmlFor="apellidos" className="block text-sm font-semibold text-gray-700 mb-2">
                  üë• Apellidos *
                </label>
                <input
                  type="text"
                  id="apellidos"
                  name="apellidos"
                  className={`w-full px-4 py-3 border-2 rounded-xl transition-all duration-200 focus:outline-none ${
                    errors.apellidos 
                      ? 'border-red-300 focus:border-red-500 bg-red-50' 
                      : 'border-gray-200 focus:border-casa-cyan focus:shadow-lg'
                  } disabled:bg-gray-100 disabled:cursor-not-allowed`}
                  value={formData.apellidos}
                  onChange={handleChange}
                  placeholder="P√©rez Garc√≠a"
                  disabled={loading}
                />
                {errors.apellidos && (
                  <p className="text-red-600 text-sm mt-1 flex items-center">
                    <span className="mr-1">‚ùå</span> {errors.apellidos}
                  </p>
                )}
              </div>
            </div>
                  className={`form-control ${errors.apellidos ? 'error' : ''}`}
                  value={formData.apellidos}
                  onChange={handleChange}
                  placeholder="P√©rez Garc√≠a"
                  disabled={loading}
                />
                {errors.apellidos && <div className="error-message">{errors.apellidos}</div>}
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="direccion" className="form-label">
                Direcci√≥n Completa *
              </label>
              <textarea
                id="direccion"
                name="direccion"
                className={`form-control ${errors.direccion ? 'error' : ''}`}
                value={formData.direccion}
                onChange={handleChange}
                placeholder="Calle Principal #123, Col. Centro, Ciudad, CP 12345"
                rows="3"
                disabled={loading}
              />
              {errors.direccion && <div className="error-message">{errors.direccion}</div>}
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="edad" className="form-label">
                  Edad *
                </label>
                <input
                  type="number"
                  id="edad"
                  name="edad"
                  className={`form-control ${errors.edad ? 'error' : ''}`}
                  value={formData.edad}
                  onChange={handleChange}
                  placeholder="18"
                  min="18"
                  max="120"
                  disabled={loading}
                />
                {errors.edad && <div className="error-message">{errors.edad}</div>}
              </div>

              <div className="form-group">
                <label htmlFor="telefono" className="form-label">
                  Tel√©fono *
                </label>
                <input
                  type="tel"
                  id="telefono"
                  name="telefono"
                  className={`form-control ${errors.telefono ? 'error' : ''}`}
                  value={formData.telefono}
                  onChange={handleChange}
                  placeholder="+525512345678"
                  disabled={loading}
                />
                {errors.telefono && <div className="error-message">{errors.telefono}</div>}
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="role" className="form-label">
                Rol Solicitado *
              </label>
              <select
                id="role"
                name="role"
                className={`form-control ${errors.role ? 'error' : ''}`}
                value={formData.role}
                onChange={handleChange}
                disabled={loading}
              >
                <option value="">Selecciona un rol</option>
                {ROLES.map(role => (
                  <option key={role.value} value={role.value}>
                    {role.label}
                  </option>
                ))}
              </select>
              {errors.role && <div className="error-message">{errors.role}</div>}
            </div>

            <div className="form-group">
              <label htmlFor="foto_identificacion" className="form-label">
                Fotograf√≠a de Identificaci√≥n *
              </label>
              <input
                type="file"
                id="foto_identificacion"
                name="foto_identificacion"
                className={`form-control ${errors.foto_identificacion ? 'error' : ''}`}
                onChange={handleChange}
                accept="image/png,image/jpeg,image/jpg"
                disabled={loading}
              />
              <small className="form-text text-muted">
                Sube una foto clara de tu identificaci√≥n oficial (PNG, JPG, JPEG - m√°x 5MB)
              </small>
              {errors.foto_identificacion && <div className="error-message">{errors.foto_identificacion}</div>}
              
              {previewImage && (
                <div className="image-preview mt-3">
                  <img 
                    src={previewImage} 
                    alt="Preview de identificaci√≥n" 
                    style={{ maxWidth: '200px', maxHeight: '150px', objectFit: 'cover' }}
                  />
                </div>
              )}
            </div>

            <div className="form-actions">
              <button
                type="submit"
                className="btn btn-primary w-100"
                disabled={loading}
              >
                {loading ? (
                  <>
                    <span className="spinner"></span>
                    Registrando...
                  </>
                ) : (
                  'Registrar Usuario'
                )}
              </button>
            </div>
          </form>
        </div>
        <div className="card-footer text-center">
          <p className="mb-0">
            ¬øYa tienes cuenta?{' '}
            <button 
              type="button" 
              className="btn-link" 
              onClick={onSwitchToLogin}
              disabled={loading}
            >
              Iniciar Sesi√≥n
            </button>
          </p>
        </div>
      </div>
    </div>
  );
};